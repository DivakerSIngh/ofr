@model OneFineRateBLL.Entities.etblPropertyPromotionMap

<script type="text/javascript">
    $(document).ready(function () {
        calendar();
        BindCancellationData();
        RefreshControls();
        // SetCancellationPolicyCheckBox();
    });

    function calendar() {
        var d1 = new Date();

        //var ThreeYearDate1 = new Date();
        //var a1 = ThreeYearDate1.getFullYear();
        //ThreeYearDate1.setFullYear(a + 3);

        $('#CancellationValidFrom').datepicker({
            startDate: d1,
            minDate: d1,
            maxDate: '+3Y',
            autoclose: true,
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            onClose: function (selectedDate) {
                $("#CancellationValidTo").datepicker("option", "maxDate", '+3Y');
                if (selectedDate != '') {

                    $("#CancellationValidTo").datepicker("option", "minDate", selectedDate);
                }
                else {
                    $("#CancellationValidTo").datepicker("option", "minDate", d1);
                }
            }
        });
        $('#CancellationValidTo').datepicker({
            startDate: d1,
            minDate: d1,
            maxDate: '+3Y',
            autoclose: true,
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            onClose: function (selectedDate) {
                if (selectedDate != '') {
                    $("#CancellationValidFrom").datepicker("option", "maxDate", selectedDate);
                }
                else {
                    $("#CancellationValidFrom").datepicker("option", "maxDate", '+3Y');
                    $("#CancellationValidFrom").datepicker("option", "minDate", d1);
                }
            }
        });

        $("#CancellationValidFrom").each(function () {
            var selecteddate = $("#CancellationValidFrom").datepicker("getDate");
            var dateString = $.datepicker.formatDate('mm/dd/yy', selecteddate);
            if (dateString == "01/01/2001") {
                $("#CancellationValidFrom").datepicker('setDate', new Date());
            }

        });
        $("#CancellationValidTo").each(function () {
            var selecteddate = $("#CancellationValidTo").datepicker("getDate");
            var dateString = $.datepicker.formatDate('mm/dd/yy', selecteddate);
            if (dateString == "01/01/2001") {
                $("#CancellationValidTo").datepicker('setDate', new Date());
            }

        });
        $("#ui-datepicker-div").hide();

    }

</script>

<script type="text/javascript">
    function RefreshControls() {
        $.each($("input[name='SelectedCancellationPolicy']"), function () {
            $(this).prop("checked", false);
            $(this).prop("disabled", false);
        });
    }

    @*function SetCancellationPolicyCheckBox() {

        var url = '@Url.Action("BindCancellationPolicy", "PromotionManagement")';
        $.getJSON(url, function (data) {
            var tableTemplete = $('<table cellspacing="0"  style="width:100%;" class="alinghTable"><tbody><tr>');
            if (data.suggestions.length > 0) {
                $.each(data.suggestions, function () {
                    tableTemplete.append($('<td style="width:15%;" >').append(
                        $("<input>").attr('type', 'checkbox').val(this.Value).prop('checked', this.Selected).attr('data-val', true).attr('onchange', 'CancellationPolicy(this);').attr('name', 'SelectedCancellationPolicy')
                            ).append($("<label>").attr('for', 'SelectedCancellationPolicy').text(this.Text)));

                });

                if (data.suggestions.length < 5) {
                    var totalcRoom = 5 - data.suggestions.length;
                    for (var i = 0; i < totalcRoom; i++) {
                        tableTemplete.append($('<td>'));
                    }
                }

            }
            else { tableTemplete.append($('<td style="color:red;">').append($("<label>"))); }

            tableTemplete.append($('</tr></tbody></table>'));
            $('#preParentCancellationCheckboxDataDiv').html('');
            $('#dynamicParentCancellationCheckboxDataDiv').html(tableTemplete);
        });

    }*@
</script>

<style>
    .alinghTableCancellation td {
        width: 5%;
    }
</style>



@Html.HiddenFor(x => x.CancellationPolicyJSonData, new { Id = "hdnJson" })
<input type="hidden" value="@ViewBag.cancellationJSON" id="hdnGetJSON" />
<div class="col-xs-12">
    <strong>Cancellation Policy</strong>

</div>
<div class="row mar-padd0">
    @{
        int Count = 0;
        Count = @Model.CancellationPolicy.Count;
    }
    @{


        if (Count == 2)
        {
            <div class="col-md-6">

                @{
            var putCheckBoxesIntoTablenew3 = new MvcCheckBoxList.Model.HtmlListInfo(MvcCheckBoxList.Model.HtmlTag.table, 3, new { @class = "alinghTable", style = "width:100%;" });
        if (@Model.iCancelationChkBox > 0)
        {
                @Html.CheckBoxListFor(m => m.SelectedCancellationPolicy, m => m.CancellationPolicy,
                                                                        group => group.Value,
                                                                        group => group.Text,
                                                                        m => m.Selected, putCheckBoxesIntoTablenew3,
                                                                        x => new { onchange = "CancellationPolicy(this);", name = "SelectedCancellationPolicy" })
        }
        else
        {
                <div style="color:red;">Please create cancellation policy.</div>
        }


                }

            </div>
        }
        else
        {
            <div class="col-md-12">

                @{
            var putCheckBoxesIntoTablenew3 = new MvcCheckBoxList.Model.HtmlListInfo(MvcCheckBoxList.Model.HtmlTag.table, 4, new { @class = "alinghTable", style = "width:100%;" });
        if (@Model.iCancelationChkBox > 0)
        {
                @Html.CheckBoxListFor(m => m.SelectedCancellationPolicy, m => m.CancellationPolicy,
                                                                        group => group.Value,
                                                                        group => group.Text,
                                                                        m => m.Selected, putCheckBoxesIntoTablenew3,
                                                                        x => new { onchange = "CancellationPolicy(this);", name = "SelectedCancellationPolicy" })
        }
        else
        {
                <div style="color:red;">Please create cancellation policy.</div>
        }


                }

            </div>
        }

    }

</div>
    <div class="col-xs-12">
        <div class="col-xs-2" style="width:12%;">
            Validity From
        </div>
        <div class="col-xs-2" style="width:12%;">
            @Html.TextBoxFor(m => m.dtCancellationValidFrom, new { Value = Model.dtCancellationValidFrom, type = "text", @class = "form-control ", name = "CancellationValidFrom", onkeyup = "this.value=''", id = "CancellationValidFrom" })
        </div>
        <div class="col-xs-2" style="width:10%;">
            Validity To
        </div>
        <div class="col-xs-2" style="width:12%;">
            @Html.TextBoxFor(m => m.dtCancellationValidTo, new { Value = Model.dtCancellationValidTo, type = "text", @class = "form-control ", name = "CancellationValidTo", onkeyup = "this.value=''", id = "CancellationValidTo" })
        </div>
        <div class="col-xs-1">
            <input name="" type="button" class="btn btn-primary pull-right marginbottom10" value="Add" id="AddRange">
        </div>
    </div>
    <div class="row">&nbsp;</div>

    <div class="col-xs-12 margintop20">
        <table class="table table-striped table-bordered table-hover txtcenter" id="RangeTable">
            <thead>
                <tr>
                    <th class="text-center">Cancellation Policy</th>
                    <th class="text-center">Validity From</th>
                    <th class="text-center">Validity To</th>
                    <th class="text-center">Delete</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

    </div>





    <script type="text/javascript">
        var rangejson = [];
        $('#AddRange').click(function () {
            var c = 0;
            var CancellationPolicyId = [];
            var CancellationPolicyName = [];
            $.each($("input[name='SelectedCancellationPolicy']:checked"), function () {
                CancellationPolicyId.push($(this).val());
                CancellationPolicyName.push($(this).next("label").text());
                c = c + 1;
            });

            var CancellationValidFrom = $('#CancellationValidFrom').val();
            var CancellationValidTo = $('#CancellationValidTo').val();
            var childValidityFrom = $('#hdnRPValidFrom').val();
            var childValidityTo = $('#hdnRPValidTo').val();

            //alert(ConvertToDate(CancellationValidFrom));
            // alert(ConvertToDate(CancellationValidTo));
            //alert(childValidityFrom);
            //alert(ConvertToDate(childValidityFrom));
            //alert(ConvertToDate(childValidityTo));


            if (CancellationValidFrom == "" || CancellationValidTo == "") {
                alert("Please select cancellation policy validity"); return;
            }
            else if (ConvertToDate(CancellationValidFrom) > ConvertToDate(CancellationValidTo)) {
                alert("Cancellation policy’s validity should be within rate plan’s validity"); return;
            }

            if ((ConvertToDate(CancellationValidFrom) >= ConvertToDate(childValidityFrom) && ConvertToDate(CancellationValidFrom) <= ConvertToDate(childValidityTo))) {
            } else { alert("Cancellation policy’s validity should be within rate plan’s validity"); return; }

            if ((ConvertToDate(CancellationValidTo) >= ConvertToDate(childValidityFrom) && ConvertToDate(CancellationValidTo) <= ConvertToDate(childValidityTo))) {
            } else { alert("Cancellation policy’s validity should be within rate plan’s validity"); return; }



            if (c == 0) {
                alert("Please select atleast one cancellation policy"); return;
            }
            else {
                var values = {
                    'CancellationPolicyId': CancellationPolicyId,
                    'CancellationPolicyName': CancellationPolicyName,
                    'CancellationValidFrom': CancellationValidFrom,
                    'CancellationValidTo': CancellationValidTo,
                    'sPolicyId': CancellationPolicyId.toString(),
                    'sPolicyName': CancellationPolicyName.toString()
                };
                var val = CheckData(ConvertToDate(CancellationValidFrom), ConvertToDate(CancellationValidTo));
                if (val == true) {
                    rangejson.push(values);
                    SetTableRows();
                    RefreshControls();
                }
                else {
                    alert("Selected validity already exists.");
                }
            }

        });
        function ConvertToDate(dtval) {
            if (dtval != null || dtval != "") {
                var date = dtval.substring(0, 2);
                var month = dtval.substring(3, 5);
                var year = dtval.substring(6, 10);
                var convertedDate = new Date(year, month - 1, date);
                return convertedDate;
            }
        }
        function CheckData(CancellationValidFrom, CancellationValidTo) {
            if (rangejson.length > 0) {
                var counter = 0;
                for (var i = 0; i < rangejson.length; i++) {
                    if ((CancellationValidFrom >= ConvertToDate(rangejson[i].CancellationValidFrom) && CancellationValidFrom <= ConvertToDate(rangejson[i].CancellationValidTo)) || (CancellationValidTo >= ConvertToDate(rangejson[i].CancellationValidFrom) && CancellationValidTo <= ConvertToDate(rangejson[i].CancellationValidTo))) {
                        counter = counter + 1;
                    }
                    if ((ConvertToDate(rangejson[i].CancellationValidFrom) >= CancellationValidFrom && ConvertToDate(rangejson[i].CancellationValidFrom) <= CancellationValidTo) || (ConvertToDate(rangejson[i].CancellationValidTo) >= CancellationValidFrom && ConvertToDate(rangejson[i].CancellationValidTo) <= CancellationValidTo)) {
                        counter = counter + 1;
                    }
                    if ((ConvertToDate(rangejson[i].CancellationValidFrom) >= CancellationValidFrom && ConvertToDate(rangejson[i].CancellationValidFrom) <= CancellationValidTo) || (ConvertToDate(rangejson[i].CancellationValidTo) >= CancellationValidFrom && ConvertToDate(rangejson[i].CancellationValidTo) <= CancellationValidTo)) {
                        counter = counter + 1;
                    }

                }
                if (counter > 0) {
                    return false;
                }
                else {
                    return true;
                }
            }
            else { return true; }
        }
        function SetTableRows() {
            var rowtext = '';
            console.log(rangejson.length);
            if (rangejson.length > 0) {

                for (var i = 0; i < rangejson.length; i++) {
                    rowtext += '<tr>';
                    rowtext += '<td>' + rangejson[i].CancellationPolicyName + '</td>';
                    rowtext += '<td>' + rangejson[i].CancellationValidFrom + '</td>';
                    rowtext += '<td>' + rangejson[i].CancellationValidTo + '</td>';
                    rowtext += '<td><i onclick="DeleteOrEdit(\'delete\',' + i + ')";  class="fa fa-times-circle red" /></td>';
                    rowtext += '</tr>';
                }
            }
            $("#RangeTable tbody").html(rowtext);
            $("#hdnJson").val(JSON.stringify(rangejson));

            var d = new Date();
            var ThreeYearDate = new Date();
            var a = ThreeYearDate.getFullYear();
            ThreeYearDate.setFullYear(a + 3);

            $("#CancellationValidFrom").datepicker('setDate', null);
            $("#CancellationValidFrom").datepicker("option", "maxDate", ThreeYearDate);

            $("#CancellationValidTo").datepicker('setDate', null);
            $("#CancellationValidTo").datepicker("option", "maxDate", ThreeYearDate);

        }
        function BindCancellationData() {
            //rangejson = jQuery.parseJSON('[{"CancellationPolicyId":null,"CancellationPolicyName":null,"CancellationValidFrom":"26/08/2016","CancellationValidTo":"28/08/2016","sPolicyId":"8,15","sPolicyName":"D 20-100%,1.00N - 21D"},{"CancellationPolicyId":null,"CancellationPolicyName":null,"CancellationValidFrom":"29/08/2016","CancellationValidTo":"31/08/2016","sPolicyId":"10,16","sPolicyName":"2.00% - 22H,1N - -2H"}]');
            var JSONval = $('#hdnGetJSON').val();
            if (!(JSONval.trim() == '' || JSONval == null || JSONval.trim() == "")) {
                //console.log(JSONval);
                rangejson = jQuery.parseJSON(JSONval);
                SetTableRows();
            }
            else {
                var rowtext = '';
                rowtext += '<tr>';
                rowtext += '<td style="color:red;"> Please add cancellation policy. </td>';
                rowtext += '</tr>';
                $("#RangeTable tbody").html(rowtext);

            }

            @*var chkcount = '@Model.iCancelationChkBox';
        if (chkcount == 0) {
            var rowtext = '';
            rowtext += '<tr>';
            rowtext += '<td style="color:red;"> Please create cancellation policy. </td>';
            rowtext += '</tr>';
            $("#RangeTable tbody").html(rowtext);
        }*@
        }
        function DeleteOrEdit(act, i) {
            if (act == "delete") {
                rangejson.splice(i, 1);
            }
            SetTableRows();
        }
    </script>

    <script type="text/javascript">
        function CancellationPolicy(cb) {
            var valNo = cb.value;
            var valText = $(cb).next("label").text();
            if (valText == "Non-Refundable") { // Do your work here
                $("input[name='SelectedCancellationPolicy']").each(function () {
                    if ($(this).attr("value") != valNo) {
                        if (cb.checked)
                            $(this).prop("checked", !cb.checked);
                        $(this).prop("disabled", cb.checked);
                    }
                });
            }
        }
    </script>

